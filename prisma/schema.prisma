
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum FuelType {
  ESSENCE
  DIESEL
  HYBRIDE
  ELECTRIQUE
}

enum Transmission {
  MANUELLE
  AUTOMATIQUE
}

enum Category {
  ECONOMIQUE
  COMPACTE
  SUV
  MONOSPACE
  CABRIOLET
  LUXE
  UTILITAIRE
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  role          String   @default("user")

  rentals       Rental[]
  createdAt     DateTime  @default(now())
  emailVerified Boolean
  image         String?
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}

model Agency {
  id            String  @id @default(cuid())
  name          String
  tahiti_number String  @unique
  siret         String? @unique
  email         String
  phone         String
  address       String
  island        String
  website       String?
  isApproved    Boolean @default(false)

  cars           Car[]
  createdAt      DateTime  @default(now())
  mainLocationId String?
  mainLocation   Location? @relation(fields: [mainLocationId], references: [id])
}

model Car {
  id              String       @id @default(cuid())
  brand           String
  model           String
  year            Int
  category        Category
  fuelType        FuelType
  transmission    Transmission
  seats           Int
  doors           Int
  airConditioning Boolean
  mileageLimit    Int?
  pricePerDay     Float
  pricePerWeek    Float?

  imageUrls CarImage[]
  available Boolean    @default(true)

  agency   Agency @relation(fields: [agencyId], references: [id])
  agencyId String

  rentals   Rental[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  options CarOption[]
}

model CarOption {
  id    String @id @default(cuid())
  name  String
  car   Car    @relation(fields: [carId], references: [id])
  carId String
}

model CarImage {
  id    String @id @default(cuid())
  url   String
  car   Car    @relation(fields: [carId], references: [id])
  carId String
}

model Rental {
  id         String   @id @default(cuid())
  pickupDate DateTime
  returnDate DateTime
  totalPrice Float
  status     String

  car   Car    @relation(fields: [carId], references: [id])
  carId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt        DateTime @default(now())
  pickupLocationId String
  returnLocationId String
  pickupLocation   Location @relation("pickupLocation", fields: [pickupLocationId], references: [id])
  returnLocation   Location @relation("returnLocation", fields: [returnLocationId], references: [id])
}

model Location {
  id              String       @id @default(cuid())
  name            String // Ex: Aéroport de Faa'a
  type            LocationType
  region          String // Ex: Tahiti, Moorea
  isActive        Boolean      @default(true)
  isPickupOnly    Boolean      @default(false)
  isReturnOnly    Boolean      @default(false)
  isDefault       Boolean      @default(false)
  isSameForReturn Boolean      @default(true)

  // (optionnel, pour plus tard)
  latitude  Float?
  longitude Float?

  // Relations
  rentalsPickups Rental[] @relation("pickupLocation")
  rentalsReturns Rental[] @relation("returnLocation")
  agencies       Agency[] // Si une agence est associée à ce lieu
}

enum LocationType {
  AGENCE
  AÉROPORT
  HÔTEL
  PORT
  AUTRE
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
